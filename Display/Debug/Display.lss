
Display.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002ac  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000300  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000300  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000330  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000e8  00000000  00000000  0000036c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000169c  00000000  00000000  00000454  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000090a  00000000  00000000  00001af0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000856  00000000  00000000  000023fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002bc  00000000  00000000  00002c50  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000609  00000000  00000000  00002f0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000011ba  00000000  00000000  00003515  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000d8  00000000  00000000  000046cf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	20 c0       	rjmp	.+64     	; 0x42 <__ctors_end>
   2:	27 c0       	rjmp	.+78     	; 0x52 <__bad_interrupt>
   4:	26 c0       	rjmp	.+76     	; 0x52 <__bad_interrupt>
   6:	25 c0       	rjmp	.+74     	; 0x52 <__bad_interrupt>
   8:	24 c0       	rjmp	.+72     	; 0x52 <__bad_interrupt>
   a:	23 c0       	rjmp	.+70     	; 0x52 <__bad_interrupt>
   c:	22 c0       	rjmp	.+68     	; 0x52 <__bad_interrupt>
   e:	21 c0       	rjmp	.+66     	; 0x52 <__bad_interrupt>
  10:	20 c0       	rjmp	.+64     	; 0x52 <__bad_interrupt>
  12:	1f c0       	rjmp	.+62     	; 0x52 <__bad_interrupt>
  14:	1e c0       	rjmp	.+60     	; 0x52 <__bad_interrupt>
  16:	1d c0       	rjmp	.+58     	; 0x52 <__bad_interrupt>
  18:	1c c0       	rjmp	.+56     	; 0x52 <__bad_interrupt>
  1a:	1b c0       	rjmp	.+54     	; 0x52 <__bad_interrupt>
  1c:	1a c0       	rjmp	.+52     	; 0x52 <__bad_interrupt>

0000001e <__trampolines_end>:
  1e:	3f 06       	cpc	r3, r31
  20:	5b 4f       	sbci	r21, 0xFB	; 251
  22:	66 6d       	ori	r22, 0xD6	; 214
  24:	7d 07       	cpc	r23, r29
  26:	7f 6f       	ori	r23, 0xFF	; 255
  28:	77 7c       	andi	r23, 0xC7	; 199
  2a:	39 5e       	subi	r19, 0xE9	; 233
  2c:	79 71       	andi	r23, 0x19	; 25
  2e:	3d 76       	andi	r19, 0x6D	; 109
  30:	06 1f       	adc	r16, r22
  32:	76 38       	cpi	r23, 0x86	; 134
  34:	15 54       	subi	r17, 0x45	; 69
  36:	3f 73       	andi	r19, 0x3F	; 63
  38:	67 50       	subi	r22, 0x07	; 7
  3a:	6d 78       	andi	r22, 0x8D	; 141
  3c:	3e 1c       	adc	r3, r14
  3e:	2a 76       	andi	r18, 0x6A	; 106
  40:	6e 5b       	subi	r22, 0xBE	; 190

00000042 <__ctors_end>:
  42:	11 24       	eor	r1, r1
  44:	1f be       	out	0x3f, r1	; 63
  46:	cf e5       	ldi	r28, 0x5F	; 95
  48:	d2 e0       	ldi	r29, 0x02	; 2
  4a:	de bf       	out	0x3e, r29	; 62
  4c:	cd bf       	out	0x3d, r28	; 61
  4e:	0f d0       	rcall	.+30     	; 0x6e <main>
  50:	2b c1       	rjmp	.+598    	; 0x2a8 <_exit>

00000052 <__bad_interrupt>:
  52:	d6 cf       	rjmp	.-84     	; 0x0 <__vectors>

00000054 <_Z7initADCv>:
            (0 << REFS1) |     // Sets ref. voltage to Vcc, bit 1   
            (0 << REFS0) |     // Sets ref. voltage to Vcc, bit 0
            (0 << MUX3)  |     // use ADC2 for input (PB4), MUX bit 3
            (0 << MUX2)  |     // use ADC2 for input (PB4), MUX bit 2
            (1 << MUX1)  |     // use ADC2 for input (PB4), MUX bit 1
            (0 << MUX0);       // use ADC2 for input (PB4), MUX bit 0
  54:	82 e0       	ldi	r24, 0x02	; 2
  56:	87 b9       	out	0x07, r24	; 7

  ADCSRA = 
            (1 << ADEN)  |     // Enable ADC 
            (1 << ADPS2) |     // set prescaler to 16, bit 2 
            (0 << ADPS1) |     // set prescaler to 16, bit 1 
            (0 << ADPS0);      // set prescaler to 16, bit 0  
  58:	84 e8       	ldi	r24, 0x84	; 132
  5a:	86 b9       	out	0x06, r24	; 6
  5c:	08 95       	ret

0000005e <_Z3adcv>:
int adc(void)
{
	uint8_t adc_lobyte; // to hold the low byte of the ADC register (ADCL)
	uint16_t raw_adc;

	ADCSRA |= (1 << ADSC);         // start ADC measurement
  5e:	36 9a       	sbi	0x06, 6	; 6
	while (ADCSRA & (1 << ADSC) ); // wait till conversion complete
  60:	36 99       	sbic	0x06, 6	; 6
  62:	fe cf       	rjmp	.-4      	; 0x60 <_Z3adcv+0x2>

	// for 10-bit resolution:
	adc_lobyte = ADCL; // get the sample value from ADCL
  64:	84 b1       	in	r24, 0x04	; 4
	raw_adc = ADCH<<8 | adc_lobyte;   // add lobyte and hibyte
  66:	25 b1       	in	r18, 0x05	; 5

	return raw_adc;
  68:	90 e0       	ldi	r25, 0x00	; 0
}
  6a:	92 2b       	or	r25, r18
  6c:	08 95       	ret

0000006e <main>:



int main() {
  6e:	cf 93       	push	r28
  70:	df 93       	push	r29
  72:	1f 92       	push	r1
  74:	cd b7       	in	r28, 0x3d	; 61
  76:	de b7       	in	r29, 0x3e	; 62
  TM1637 disp;
  78:	ce 01       	movw	r24, r28
  7a:	01 96       	adiw	r24, 0x01	; 1
  7c:	5c d0       	rcall	.+184    	; 0x136 <_ZN6TM1637C1Ev>
  disp.setBrightness(0x08);
  7e:	68 e0       	ldi	r22, 0x08	; 8
  80:	ce 01       	movw	r24, r28
  82:	01 96       	adiw	r24, 0x01	; 1
  84:	ea d0       	rcall	.+468    	; 0x25a <_ZN6TM163713setBrightnessEh>

//  uint16_t i = 0;
  initADC();
  86:	e6 df       	rcall	.-52     	; 0x54 <_Z7initADCv>

 //  disp.clear();

  while (1) {
//	  disp.setNumber(i++);
	disp.setNumber(adc());
  88:	ea df       	rcall	.-44     	; 0x5e <_Z3adcv>
  8a:	ac 01       	movw	r20, r24
  8c:	99 0f       	add	r25, r25
  8e:	66 0b       	sbc	r22, r22
  90:	77 0b       	sbc	r23, r23
  92:	01 e0       	ldi	r16, 0x01	; 1
  94:	23 e0       	ldi	r18, 0x03	; 3
  96:	ce 01       	movw	r24, r28
  98:	01 96       	adiw	r24, 0x01	; 1
  9a:	78 d0       	rcall	.+240    	; 0x18c <_ZN6TM16379setNumberEmhh>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9c:	2f ef       	ldi	r18, 0xFF	; 255
  9e:	89 e6       	ldi	r24, 0x69	; 105
  a0:	98 e1       	ldi	r25, 0x18	; 24
  a2:	21 50       	subi	r18, 0x01	; 1
  a4:	80 40       	sbci	r24, 0x00	; 0
  a6:	90 40       	sbci	r25, 0x00	; 0
  a8:	e1 f7       	brne	.-8      	; 0xa2 <main+0x34>
  aa:	00 c0       	rjmp	.+0      	; 0xac <main+0x3e>
  ac:	00 00       	nop
  ae:	ec cf       	rjmp	.-40     	; 0x88 <main+0x1a>

000000b0 <_ZN12_GLOBAL__N_15startEv>:
    ++offset;
    _delay_ms(250);
  }
}

void TM1637::setDots(const uint8_t mask) { _dotMask = mask; }
  b0:	c1 9a       	sbi	0x18, 1	; 24
  b2:	c0 9a       	sbi	0x18, 0	; 24
  b4:	00 00       	nop
  b6:	c0 98       	cbi	0x18, 0	; 24
  b8:	00 00       	nop
  ba:	08 95       	ret

000000bc <_ZN12_GLOBAL__N_14stopEv>:
  bc:	c1 98       	cbi	0x18, 1	; 24
  be:	00 00       	nop
  c0:	c1 9a       	sbi	0x18, 1	; 24
  c2:	c0 98       	cbi	0x18, 0	; 24
  c4:	00 00       	nop
  c6:	c0 9a       	sbi	0x18, 0	; 24
  c8:	08 95       	ret

000000ca <_ZN12_GLOBAL__N_14sendEh>:
  ca:	98 e0       	ldi	r25, 0x08	; 8
  cc:	c1 98       	cbi	0x18, 1	; 24
  ce:	80 ff       	sbrs	r24, 0
  d0:	02 c0       	rjmp	.+4      	; 0xd6 <_ZN12_GLOBAL__N_14sendEh+0xc>
  d2:	c0 9a       	sbi	0x18, 0	; 24
  d4:	01 c0       	rjmp	.+2      	; 0xd8 <_ZN12_GLOBAL__N_14sendEh+0xe>
  d6:	c0 98       	cbi	0x18, 0	; 24
  d8:	00 00       	nop
  da:	c1 9a       	sbi	0x18, 1	; 24
  dc:	00 00       	nop
  de:	86 95       	lsr	r24
  e0:	91 50       	subi	r25, 0x01	; 1
  e2:	a1 f7       	brne	.-24     	; 0xcc <_ZN12_GLOBAL__N_14sendEh+0x2>
  e4:	c1 98       	cbi	0x18, 1	; 24
  e6:	c0 98       	cbi	0x18, 0	; 24
  e8:	00 00       	nop
  ea:	c1 9a       	sbi	0x18, 1	; 24
  ec:	00 00       	nop
  ee:	08 95       	ret

000000f0 <_ZN12_GLOBAL__N_18send_cmdEh>:
  f0:	cf 93       	push	r28
  f2:	c8 2f       	mov	r28, r24
  f4:	dd df       	rcall	.-70     	; 0xb0 <_ZN12_GLOBAL__N_15startEv>
  f6:	8c 2f       	mov	r24, r28
  f8:	e8 df       	rcall	.-48     	; 0xca <_ZN12_GLOBAL__N_14sendEh>
  fa:	e0 df       	rcall	.-64     	; 0xbc <_ZN12_GLOBAL__N_14stopEv>
  fc:	cf 91       	pop	r28
  fe:	08 95       	ret

00000100 <_ZN12_GLOBAL__N_19send_dataEhh>:
 100:	cf 93       	push	r28
 102:	df 93       	push	r29
 104:	d8 2f       	mov	r29, r24
 106:	c6 2f       	mov	r28, r22
 108:	84 e4       	ldi	r24, 0x44	; 68
 10a:	f2 df       	rcall	.-28     	; 0xf0 <_ZN12_GLOBAL__N_18send_cmdEh>
 10c:	d1 df       	rcall	.-94     	; 0xb0 <_ZN12_GLOBAL__N_15startEv>
 10e:	8d 2f       	mov	r24, r29
 110:	80 6c       	ori	r24, 0xC0	; 192
 112:	db df       	rcall	.-74     	; 0xca <_ZN12_GLOBAL__N_14sendEh>
 114:	8c 2f       	mov	r24, r28
 116:	d9 df       	rcall	.-78     	; 0xca <_ZN12_GLOBAL__N_14sendEh>
 118:	d1 df       	rcall	.-94     	; 0xbc <_ZN12_GLOBAL__N_14stopEv>
 11a:	00 00       	nop
 11c:	df 91       	pop	r29
 11e:	cf 91       	pop	r28
 120:	08 95       	ret

00000122 <_ZN6TM16375clearEv>:
 122:	cf 93       	push	r28
 124:	c0 e0       	ldi	r28, 0x00	; 0
 126:	60 e0       	ldi	r22, 0x00	; 0
 128:	8c 2f       	mov	r24, r28
 12a:	ea df       	rcall	.-44     	; 0x100 <_ZN12_GLOBAL__N_19send_dataEhh>
 12c:	cf 5f       	subi	r28, 0xFF	; 255
 12e:	c4 30       	cpi	r28, 0x04	; 4
 130:	d1 f7       	brne	.-12     	; 0x126 <_ZN6TM16375clearEv+0x4>
 132:	cf 91       	pop	r28
 134:	08 95       	ret

00000136 <_ZN6TM1637C1Ev>:
 136:	cf 93       	push	r28
 138:	df 93       	push	r29
 13a:	ec 01       	movw	r28, r24
 13c:	18 82       	st	Y, r1
 13e:	87 b3       	in	r24, 0x17	; 23
 140:	83 60       	ori	r24, 0x03	; 3
 142:	87 bb       	out	0x17, r24	; 23
 144:	c1 9a       	sbi	0x18, 1	; 24
 146:	80 e4       	ldi	r24, 0x40	; 64
 148:	d3 df       	rcall	.-90     	; 0xf0 <_ZN12_GLOBAL__N_18send_cmdEh>
 14a:	8f e8       	ldi	r24, 0x8F	; 143
 14c:	d1 df       	rcall	.-94     	; 0xf0 <_ZN12_GLOBAL__N_18send_cmdEh>
 14e:	ce 01       	movw	r24, r28
 150:	e8 df       	rcall	.-48     	; 0x122 <_ZN6TM16375clearEv>
 152:	df 91       	pop	r29
 154:	cf 91       	pop	r28
 156:	08 95       	ret

00000158 <_ZN6TM16377setByteEhh>:
 158:	fc 01       	movw	r30, r24
 15a:	86 2f       	mov	r24, r22
 15c:	20 81       	ld	r18, Z
 15e:	30 e0       	ldi	r19, 0x00	; 0
 160:	02 c0       	rjmp	.+4      	; 0x166 <_ZN6TM16377setByteEhh+0xe>
 162:	35 95       	asr	r19
 164:	27 95       	ror	r18
 166:	6a 95       	dec	r22
 168:	e2 f7       	brpl	.-8      	; 0x162 <_ZN6TM16377setByteEhh+0xa>
 16a:	20 fd       	sbrc	r18, 0
 16c:	02 c0       	rjmp	.+4      	; 0x172 <_ZN6TM16377setByteEhh+0x1a>
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	01 c0       	rjmp	.+2      	; 0x174 <_ZN6TM16377setByteEhh+0x1c>
 172:	90 e8       	ldi	r25, 0x80	; 128
 174:	64 2f       	mov	r22, r20
 176:	69 2b       	or	r22, r25
 178:	c3 df       	rcall	.-122    	; 0x100 <_ZN12_GLOBAL__N_19send_dataEhh>
 17a:	08 95       	ret

0000017c <_ZN6TM16378setDigitEhh>:
 17c:	4f 70       	andi	r20, 0x0F	; 15
 17e:	e4 2f       	mov	r30, r20
 180:	f0 e0       	ldi	r31, 0x00	; 0
 182:	e2 5e       	subi	r30, 0xE2	; 226
 184:	ff 4f       	sbci	r31, 0xFF	; 255
 186:	44 91       	lpm	r20, Z
 188:	e7 df       	rcall	.-50     	; 0x158 <_ZN6TM16377setByteEhh>
 18a:	08 95       	ret

0000018c <_ZN6TM16379setNumberEmhh>:
 18c:	4f 92       	push	r4
 18e:	5f 92       	push	r5
 190:	6f 92       	push	r6
 192:	7f 92       	push	r7
 194:	8f 92       	push	r8
 196:	9f 92       	push	r9
 198:	af 92       	push	r10
 19a:	bf 92       	push	r11
 19c:	cf 92       	push	r12
 19e:	df 92       	push	r13
 1a0:	ef 92       	push	r14
 1a2:	ff 92       	push	r15
 1a4:	0f 93       	push	r16
 1a6:	1f 93       	push	r17
 1a8:	cf 93       	push	r28
 1aa:	df 93       	push	r29
 1ac:	5c 01       	movw	r10, r24
 1ae:	6a 01       	movw	r12, r20
 1b0:	7b 01       	movw	r14, r22
 1b2:	c2 2f       	mov	r28, r18
 1b4:	01 11       	cpse	r16, r1
 1b6:	1d c0       	rjmp	.+58     	; 0x1f2 <_ZN6TM16379setNumberEmhh+0x66>
 1b8:	4a 30       	cpi	r20, 0x0A	; 10
 1ba:	51 05       	cpc	r21, r1
 1bc:	61 05       	cpc	r22, r1
 1be:	71 05       	cpc	r23, r1
 1c0:	b0 f0       	brcs	.+44     	; 0x1ee <_ZN6TM16379setNumberEmhh+0x62>
 1c2:	9a 01       	movw	r18, r20
 1c4:	ab 01       	movw	r20, r22
 1c6:	d0 e0       	ldi	r29, 0x00	; 0
 1c8:	0f 2e       	mov	r0, r31
 1ca:	fa e0       	ldi	r31, 0x0A	; 10
 1cc:	4f 2e       	mov	r4, r31
 1ce:	51 2c       	mov	r5, r1
 1d0:	61 2c       	mov	r6, r1
 1d2:	71 2c       	mov	r7, r1
 1d4:	f0 2d       	mov	r31, r0
 1d6:	ca 01       	movw	r24, r20
 1d8:	b9 01       	movw	r22, r18
 1da:	a3 01       	movw	r20, r6
 1dc:	92 01       	movw	r18, r4
 1de:	42 d0       	rcall	.+132    	; 0x264 <__udivmodsi4>
 1e0:	df 5f       	subi	r29, 0xFF	; 255
 1e2:	2a 30       	cpi	r18, 0x0A	; 10
 1e4:	31 05       	cpc	r19, r1
 1e6:	41 05       	cpc	r20, r1
 1e8:	51 05       	cpc	r21, r1
 1ea:	a8 f7       	brcc	.-22     	; 0x1d6 <_ZN6TM16379setNumberEmhh+0x4a>
 1ec:	01 c0       	rjmp	.+2      	; 0x1f0 <_ZN6TM16379setNumberEmhh+0x64>
 1ee:	d0 e0       	ldi	r29, 0x00	; 0
 1f0:	cd 0f       	add	r28, r29
 1f2:	0f 2e       	mov	r0, r31
 1f4:	fa e0       	ldi	r31, 0x0A	; 10
 1f6:	4f 2e       	mov	r4, r31
 1f8:	51 2c       	mov	r5, r1
 1fa:	61 2c       	mov	r6, r1
 1fc:	71 2c       	mov	r7, r1
 1fe:	f0 2d       	mov	r31, r0
 200:	88 24       	eor	r8, r8
 202:	8a 94       	dec	r8
 204:	8c 0e       	add	r8, r28
 206:	c7 01       	movw	r24, r14
 208:	b6 01       	movw	r22, r12
 20a:	a3 01       	movw	r20, r6
 20c:	92 01       	movw	r18, r4
 20e:	2a d0       	rcall	.+84     	; 0x264 <__udivmodsi4>
 210:	92 2e       	mov	r9, r18
 212:	03 2f       	mov	r16, r19
 214:	14 2f       	mov	r17, r20
 216:	d5 2f       	mov	r29, r21
 218:	46 2f       	mov	r20, r22
 21a:	6c 2f       	mov	r22, r28
 21c:	c5 01       	movw	r24, r10
 21e:	ae df       	rcall	.-164    	; 0x17c <_ZN6TM16378setDigitEhh>
 220:	c9 2c       	mov	r12, r9
 222:	d0 2e       	mov	r13, r16
 224:	e1 2e       	mov	r14, r17
 226:	fd 2e       	mov	r15, r29
 228:	c1 14       	cp	r12, r1
 22a:	d1 04       	cpc	r13, r1
 22c:	e1 04       	cpc	r14, r1
 22e:	f1 04       	cpc	r15, r1
 230:	19 f0       	breq	.+6      	; 0x238 <_ZN6TM16379setNumberEmhh+0xac>
 232:	c8 2d       	mov	r28, r8
 234:	cf 3f       	cpi	r28, 0xFF	; 255
 236:	21 f7       	brne	.-56     	; 0x200 <_ZN6TM16379setNumberEmhh+0x74>
 238:	df 91       	pop	r29
 23a:	cf 91       	pop	r28
 23c:	1f 91       	pop	r17
 23e:	0f 91       	pop	r16
 240:	ff 90       	pop	r15
 242:	ef 90       	pop	r14
 244:	df 90       	pop	r13
 246:	cf 90       	pop	r12
 248:	bf 90       	pop	r11
 24a:	af 90       	pop	r10
 24c:	9f 90       	pop	r9
 24e:	8f 90       	pop	r8
 250:	7f 90       	pop	r7
 252:	6f 90       	pop	r6
 254:	5f 90       	pop	r5
 256:	4f 90       	pop	r4
 258:	08 95       	ret

0000025a <_ZN6TM163713setBrightnessEh>:

void TM1637::setBrightness(const uint8_t brightness) {
  send_cmd(TM_DISP_CTRL | TM_DISP_ENABLE | (brightness & TM_DISP_PWM_MASK));
 25a:	86 2f       	mov	r24, r22
 25c:	87 70       	andi	r24, 0x07	; 7
 25e:	88 68       	ori	r24, 0x88	; 136
 260:	47 df       	rcall	.-370    	; 0xf0 <_ZN12_GLOBAL__N_18send_cmdEh>
 262:	08 95       	ret

00000264 <__udivmodsi4>:
 264:	a1 e2       	ldi	r26, 0x21	; 33
 266:	1a 2e       	mov	r1, r26
 268:	aa 1b       	sub	r26, r26
 26a:	bb 1b       	sub	r27, r27
 26c:	fd 01       	movw	r30, r26
 26e:	0d c0       	rjmp	.+26     	; 0x28a <__udivmodsi4_ep>

00000270 <__udivmodsi4_loop>:
 270:	aa 1f       	adc	r26, r26
 272:	bb 1f       	adc	r27, r27
 274:	ee 1f       	adc	r30, r30
 276:	ff 1f       	adc	r31, r31
 278:	a2 17       	cp	r26, r18
 27a:	b3 07       	cpc	r27, r19
 27c:	e4 07       	cpc	r30, r20
 27e:	f5 07       	cpc	r31, r21
 280:	20 f0       	brcs	.+8      	; 0x28a <__udivmodsi4_ep>
 282:	a2 1b       	sub	r26, r18
 284:	b3 0b       	sbc	r27, r19
 286:	e4 0b       	sbc	r30, r20
 288:	f5 0b       	sbc	r31, r21

0000028a <__udivmodsi4_ep>:
 28a:	66 1f       	adc	r22, r22
 28c:	77 1f       	adc	r23, r23
 28e:	88 1f       	adc	r24, r24
 290:	99 1f       	adc	r25, r25
 292:	1a 94       	dec	r1
 294:	69 f7       	brne	.-38     	; 0x270 <__udivmodsi4_loop>
 296:	60 95       	com	r22
 298:	70 95       	com	r23
 29a:	80 95       	com	r24
 29c:	90 95       	com	r25
 29e:	9b 01       	movw	r18, r22
 2a0:	ac 01       	movw	r20, r24
 2a2:	bd 01       	movw	r22, r26
 2a4:	cf 01       	movw	r24, r30
 2a6:	08 95       	ret

000002a8 <_exit>:
 2a8:	f8 94       	cli

000002aa <__stop_program>:
 2aa:	ff cf       	rjmp	.-2      	; 0x2aa <__stop_program>
